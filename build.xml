<?xml version="1.0" encoding="UTF-8"?>
<!-- **Phing Drupal Template** is a XML build file for the
**[Phing build system](http://www.phing.info/trac/)** with targets and
configuration designed for **[Drupal](http://drupal.org)** projects.

The aim of the project is to provide a build file which can be used with a
contiuous integration server to ensure clean code - check for compilation
errors, run unit tests, lint code and verify that code standards are upheld.

The template has been developed with the
[Jenkins job template for Drupal projects](http://reload.github.com/jenkins-drupal-template)
and the [Drupal Jenkins demo](http://github.com/kasperg/drupal-jenkins-demo).
It may work with other continuous integration systems.

### Usage

The template can be used in several ways:

* As a starting point for your own build files. Download
[`build.xml`](https://raw.github.com/reload/phing-drupal-template/master/build.xml)
to the root directory of your Drupal project and modify it as needed.

* As the actual build file for your project. You can configure most aspects of
the build according to your project through a properties file. This works
whether you have your entire Drupal project in VCS or use
[drush_make](http://drupal.org/project/drush_make). Download the entire
project and place it in a subfolder or use it as a
[git submodule](http://kernel.org/pub/software/scm/git/docs/git-submodule.html).
Using the `build` subfolder from the root directory is recommended. Copy the
`build.default.properties` file to the root directory, rename it
`build.properties` and modify it according to your project. Leave out
properties where you want to use the default values.

### Requirements

Using the template requires a range of PEAR packages present. They can be
installed as follows:

    pear channel-discover pear.phing.info
    pear channel-discover pear.pdepend.org
    pear channel-discover pear.phpmd.org
    pear channel-discover pear.phpunit.de
    pear channel-discover components.ez.no
    pear channel-discover pear.symfony-project.com

    pear install phing/phing
    pear install  -a phpmd/PHP_PMD
    pear install phpunit/phpcpd
    pear install phpunit/phploc
    pear install PHPDocumentor
    pear install PHP_CodeSniffer
    pear install HTTP_Request2
    pear install -a phpunit/PHP_CodeBrowser

The following must be available from the command line:

* [Drush](http://drupal.org/project/drush): The Drupal shell.
[Installation instructions](http://drupalcode.org/project/drush.git/blob/HEAD:/README.txt).
* PHP 5.2.7 or newer with sqlite extension
* Java Runtime Environment

### Credits

The build file is heavily inspired by Sebastian Bergmans wonderful [template
for Jenkins Jobs for PHP Projects](http://jenkins-php.org/) and began as a
Phing port of his suggested Apache Ant build file.

Many of the same tools are used: [phploc](http://sebastianbergmann.github.com/phploc/),
[phpcpd](https://github.com/sebastianbergmann/phpcpd),
[PHPMD](http://phpmd.org/), [phpDocumentor](http://www.phpdoc.org/) and [PHP_CodeBrowser](https://github.com/Mayflower/PHP_CodeBrowser).

A couple of additional external tools are downloaded and used during the
build process:

* [Phing Drush Task](http://drupal.org/project/phingdrushtask):
  A custom task for running drush from Phing
* [Phing PHPLoc](https://github.com/raphaelstolt/phploc-phing): A custom task
  for running phploc from Phing
* [jslint4java](http://jslint4java.googlecode.com/): Supports execution of
  jslint from the command line
* [jslintÂ´](https://github.com/mikewest/JSLint): A more humane version of
  Douglas Crockfords JSLint.
* [csslint](http://csslint.net): A tool to help point out problems with CSS code.
* [Mozilla Rhino](http://www.mozilla.org/rhino/download.html): An implementation of Javascript in Java.
* [Coder](http://drupal.org/project/coder): Drupal module for
  performing code reviews.

This documentation has been generated by
[phrocco](https://github.com/oneblackbear/phrocco)
- a PHP port of the literate documentation generator Docco.

### Contributors

The Phing Drupal template is developed by [Reload!](http://reload.dk) - a Drupal development agency located in Copenhagen, Denmark.

Drush Make and Simpletest support has been sponsored by [DBC](http://www.dbc.dk/).

<a href="http://github.com/reload/phing-drupal-template">
  <img style="position: absolute; top: 0; right: 0; border: 0;" src="https://a248.e.akamai.net/assets.github.com/img/30f550e0d38ceb6ef5b81500c64d970b7fb0f028/687474703a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6f72616e67655f6666373630302e706e67" alt="Fork me on GitHub">
</a>
-->

<project name="phing-drupal" default="build"  phingVersion="2.6.1"> 

  <property file="build/properties/project.prop"/>
  <property file="build/properties/db.prop"/>

  <taskdef name="drush" classpath="build" classname="DrushTask"/>

<!-- ## Main targets -->

<!-- ### Build project

Do a complete build of the project by verifying code consistency and and
performing static analysis of the code.

This is the default build target.

Do not run `docs` for now. Generating documentation eats up memory and build
time and is largely obsolete when using GitHub. -->
  <target name="build" depends="coder-review-d7">
    <echo>Cool!</echo>
  </target>  

  <target name="install" depends="db_drop, db_create, db_restore, drupal_setting_file" description="Install site">
    <echo>Project installation started</echo>

    <phingcall target="simpletest_enable"/>
    <phingcall target="simpletest_comment"/>
    <echo>Project installation finished</echo>
  </target>

  <target name="coder-review-d7" description="Review code using Drupal 7 Coder module">
    <!-- Setup properties for running Coder Review.
         For some reason these properties are not passed correctly through to
         subtargets when defining them within the phingcall. -->
    <property name="coder.review.command" value="coder-review"/>

    <!-- Download and enable the Coder Review module -->
    <phingcall target="enable-module">
      <property name="project" value="coder"/>
      <property name="project.version" value="7.x-1.0"/>
      <property name="module" value="coder_review"/>
    </phingcall>

    <!-- Perform actual coder review for each style -->
    <foreach target="coder-review" param="coder.review.type"
             list="comment,i18n,security,sql,style" />
  </target> 

  <target name="enable-module"
          depends="setup-phing-drush">
    <!-- If project is not set then we assume that the module name is also
         the project name. -->
    <property name="project" value="${module}" override="no"/>

    <!-- If the module is not already available then download it -->
    <drush command="pm-list" returnProperty="modules.available"/>
    <php function="strpos" returnProperty="module.available">
      <param>${modules.available}</param>
      <param>${module}</param>
    </php>
    <if>
      <not><istrue value="${module.available}"/></not>
      <then>
        <!-- Download specific version if specified -->
        <condition property="download" value="${project}-${project.version}">
          <isset property="project.version"/>
        </condition>
        <property name="download" value="${project}" override="false"/>

        <drush command="pm-download" assume="yes">
          <param>${download}</param>
        </drush>
      </then>
    </if>

    <!-- Enable the module -->
    <drush command="pm-enable" assume="yes">
      <param>${module}</param>
    </drush>
  </target>

  <target name="setup-phing-drush"
          depends="setup-dirs" >
    <!-- Clone the project -->
    <phingcall target="setup-git-repo">
      <property name="repo.dir"
                value="${project.toolsdir}/phing-drush"/>
      <property name="repo.url"
                value="${phing.drush.repository.url}" />
      <property name="repo.revision"
                value="${phing.drush.repository.revision}" />
    </phingcall>

    <!-- Register as custom Phing task -->
    <taskdef name="drush" classname="DrushTask"
             classpath="${project.toolsdir}/phing-drush" />

    <!-- Run drush from the project Drupal directory -->
    <property name="drush.root" value="${project.drupal.dir}"/>
  </target>

  <target name="setup-dirs"
          depends="load-properties">
    <if>
      <isset property="drupal.make.dir"/>
      <then>
        <property name="project.drupal.dir"
                value="${project.basedir}/${drupal.make.dir}" />
      </then>
      <else>
        <property name="project.drupal.dir"
                value="${project.basedir}" />
      </else>
    </if>

    <property name="project.sitesdir"
              value="${project.drupal.dir}/${project.code.dir}" />
    <property name="project.builddir"
              value="${project.basedir}/build" />
    <property name="project.toolsdir"
              value="${project.builddir}/tools" />
    <property name="project.coveragedir"
              value="${project.builddir}/coverage" />
    <property name="project.logdir"
              value="${project.builddir}/logs" />
    <property name="project.testdir"
              value="${project.builddir}/tests" />
  </target>

  <target name="load-properties">
    <php function="dirname" returnProperty="phing.dir">
      <param value="${phing.file}"/>
    </php>

    <property name="project.basedir" value="${phing.dir}" />

    <!-- Use condition instead of unless property as we cannot unset properties in Phing -->
    <if>
      <or>
        <!-- `istrue` evaluates to true is value is not set we need to check
             `isset` as well -->
        <not><istrue value="${project.properties.loaded}" /></not>
        <not><isset property="project.properties.loaded" /></not>
      </or>
      <then>
<!-- By default Jenkins runs Phing from the directory containing the build
file.  If this file is located in a subdirectory - e.g. when using Phing Drupal as a submodule - we need to reset the project basedir and reload properties.

NB: This only works if the subdirectory is directly within the Drupal
root directory. -->
        <if>
          <!-- If `build.properties` exists then assume we have a
               project root directory -->
          <available file="${project.basedir}/../build.properties"/>
          <then>
            <resolvepath propertyName="project.basedir"
                         file="${project.basedir}/../"/>
          </then>
        </if>

        <!-- By default use default properties file
             `build.default.properties` -->
        <property name="project.properties.file"
                  value="${phing.dir}/build.default.properties" />
        <!-- Load the default properties.
             Override in case `load-properties` are called multiple times. -->
        <property file="${project.properties.file}" override="true" />

        <!-- Allow override using `build.properties` in build file
             directory -->
        <available file="${phing.dir}/build.properties"
                   property="project.properties.file"
                   value="${phing.dir}/build.properties" />
        <!-- Allow override using `build.properties` in project base
             directory -->
        <available file="${project.basedir}/build.properties"
                   property="project.properties.file"
                   value="${project.basedir}/build.properties" />

        <!-- Load the overriding properties. -->
        <property file="${project.properties.file}" override="true" />

        <!-- Set property to prevent unnecessary additional invocations of this target -->
        <property name="project.properties.loaded" value="true" />
      </then>
    </if>
  </target>

  <target name="db_create">
    <echo>Create project database</echo>
    <pdo url="${db.mysql.driver}:host=${db.mysql.host}" userId="${db.mysql.user}" password="${db.mysql.password}" onerror="abort">
      CREATE DATABASE `${db.mysql.name}`;
    </pdo>
  </target>
  
  <target name="db_drop">
    <echo>Drop project database</echo>
    <pdo url="${db.mysql.driver}:host=${db.mysql.host}" userId="${db.mysql.user}" password="${db.mysql.password}" onerror="abort">
      DROP DATABASE IF EXISTS `${db.mysql.name}`;
    </pdo>
  </target> 

  <target name="db_restore">
    <pdo url="${db.mysql.driver}:host=${db.mysql.host};dbname=${db.mysql.name}" encoding="utf8"
            userId="${db.mysql.user}" password="${db.mysql.password}"
            onerror="abort">
            <fileset dir="backup">
                <include name="*.sql"/>
            </fileset>
       </pdo>
  </target>  

  <target name="drupal_setting_file" depends="drupal_settings_clean, drupal_settings_copy" description="Create drupal settings file">
    <echo>Copy settings.php file</echo>      
  </target>  

  <target name="drupal_settings_clean" description="Delete settings file if exist">
    <if>
      <available file="${project.drupal.settings.path}${project.drupal.settings.file}" />
      <then>
        <chmod file="${project.drupal.settings.path}" mode="0777" />
        <delete file="${project.drupal.settings.path}${project.drupal.settings.file}" quiet='true' />
        <echo>Delete settings.php file</echo>
      </then>
    </if>
  </target>

  <target name="drupal_settings_copy" description="Copy settings file if exist">
    <copy file="build/files/${project.drupal.settings.file}" tofile="${project.drupal.settings.path}${project.drupal.settings.file}">
      <filterchain>
        <replacetokens begintoken="%%" endtoken="%%">
          <!-- MySQL TOKENS -->
          <token key="db_name" value="${db.mysql.name}" />
          <token key="db_username" value="${db.mysqluser}" />
          <token key="db_password" value="${db.mysql.password}" />
          <token key="host" value="${db.mysql.host}" />
        </replacetokens>
      </filterchain>
    </copy>
  </target>

  <target name="simpletest_enable" description="Install drake migration">
    <drush command="pm-enable" assume="yes">
      <param>simpletest</param>
    </drush>
    <phingcall target="cc"/>
  </target>

  <target name="cc" description="Clear cache">
    <drush command="cc">
      <param>all</param>
    </drush>     
  </target>  

  <target name="simpletest_comment" description="Run simpletest">
    <drush command="test-run">
      <param>Comment</param>
    </drush>     
    <echo>Run Test</echo>
  </target>  

</project>
